(uiop:define-package #:immutable/%simple-vector-utils
  (:use :cl :iterate #:immutable/%generator)
  (:import-from :alexandria
                #:array-length #:array-index)
  (:export #:sv-push-back #:sv-pop-back #:sv-retract #:sv-update-at #:sv-replace-at #:sv-insert-at #:sv-remove-at #:sv-2-other-index))
(in-package #:immutable/%simple-vector-utils)

(declaim (ftype (function (simple-vector t) (values simple-vector &optional))
                sv-push-back))
(defun sv-push-back (vector new-element
                &aux (new-vector (make-array (1+ (cl:length vector)))))
  (iter (declare (declare-variables))
    (for elt in-vector vector with-index idx)
    (setf (svref new-vector idx) elt))
  (setf (svref new-vector (cl:length vector)) new-element)
  new-vector)

(declaim (ftype (function (simple-vector) (values (or null simple-vector) t &optional))
                sv-pop-back))
(defun sv-pop-back (simple-vector &aux (len (cl:length simple-vector)))
  (if (zerop len)
      (error 'pop-back-empty)
      (let* ((new-len (1- len))
             (popped-elt (svref simple-vector new-len)))
        (values (unless (zerop new-len)
                  (let* ((new-vector (make-array new-len)))
                    (iter (for i below new-len)
                      (setf (svref new-vector i) (svref simple-vector i)))
                    new-vector))
                popped-elt))))

(declaim (ftype (function (simple-vector array-length) (values (or null simple-vector) &optional))
                sv-retract)
         (inline sv-retract))
(defun sv-retract (simple-vector new-length)
  (unless (zerop new-length)
    (let* ((new-sv (make-array new-length)))
      (iter (declare (declare-variables))
        (for i below new-length)
        (setf (svref new-sv i) (svref simple-vector i)))
      new-sv)))

(declaim (ftype (function (simple-vector array-index (function (t) (values t &rest t)))
                          (values simple-vector &optional))
                sv-update-at)
         ;; inline advantageous because it may allow inlining the update-element function
         (inline sv-update-at))
(defun sv-update-at (simple-vector index update-element)
  (let* ((copy (copy-seq simple-vector)))
    (setf (svref copy index) (funcall update-element (svref copy index)))
    copy))

(declaim (ftype (function (simple-vector array-index t) (values simple-vector &optional))
                sv-replace-at))
(defun sv-replace-at (simple-vector index new-element)
  (sv-update-at simple-vector index (constantly new-element)))

(declaim (ftype (function (simple-vector array-index t)
                          (values simple-vector &optional))
                sv-insert-at))
(defun sv-insert-at (simple-vector index new-element)
  (let* ((new-vector (make-array (1+ (length simple-vector))))
         (fill-index -1))
    (declare ((or (eql -1) array-index) fill-index))
    (flet ((insert (value)
             (setf (svref new-vector (incf fill-index))
                   value)))
      (iter (declare (declare-variables))
        (for element in-vector simple-vector with-index source-index)
        (when (= source-index index)
          (insert new-element))
        (insert element)
        (finally (when (= source-index index)
                   (insert new-element)))))
    new-vector))

(declaim (ftype (function (simple-vector array-index)
                          (values simple-vector &optional))
                sv-remove-at))
(defun sv-remove-at (simple-vector index)
  (let* ((new-vector (make-array (1- (length simple-vector))))
         (fill-index -1))
    (declare ((or (eql -1) array-index) fill-index))
    (flet ((insert (value)
             (setf (svref new-vector (incf fill-index))
                   value)))
      (iter (declare (declare-variables))
        (for element in-vector simple-vector with-index source-index)
        (unless (= source-index index)
          (insert element))))
    new-vector))

(declaim (ftype (function ((simple-vector 2) bit) (values t &optional))
                sv-2-other-index))
(defun sv-2-other-index (simple-vector index)
  (svref simple-vector
         (if (zerop index) 1 0)))
